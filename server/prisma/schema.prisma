// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserRole {
  ADMIN
  CODER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model User {
  id String @id @default(uuid())
  name String?
  email String @unique
  image String?
  role UserRole @default(CODER)
  password String
  isemailVerified Boolean @default(false)
  verificationToken String?
  verificationTokenExpiry DateTime?
  resetPasswordToken String?
  resetPasswordTokenExpiry DateTime?
  refreshToken String?
  refreshTokenExpiry DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems Problem[]
  submission Submission[]
  problemSolved ProblemSolved[]

  sheets Sheet[]
}

model Problem {
  id String @id @default(uuid())
  title String
  description String
  difficulty Difficulty
  tags String[] //["tag1", "tag2", "tag3"]
  userId String
  examples Json
  constraints String
  hints String?
  editorial String

  testcases Json
  codeSnippets Json
  referenceSolutions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationship
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission Submission[]
  solvedBy ProblemSolved[]
}

model Submission{
  id String  @id @default(uuid())
  userId String
  problemId String
  sourceCode Json
  language String
  stdin String?
  stdout String?
  stderr String?
  compileOutput String?
  status String // Accepted , wrong answer
  memory String?
  time String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testCases TestCaseResult[]
}

model TestCaseResult{
  id            String  @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Sheet {
  id String @id @default(uuid())
  name String
  description String?
  visibility Visibility @default(PRIVATE)
  creatorId String
  tags String[] // e.g., ["dp", "medium", "amazon"]
  problems String[] // Array of Problem IDs
  isCloned Boolean @default(false)
  clonedFromId String? // ID of original sheet (if cloned)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  clonedFrom Sheet? @relation("ClonedSheets", fields: [clonedFromId], references: [id], onDelete: SetNull)
  clones Sheet[] @relation("ClonedSheets")

  @@index([visibility, tags]) // For fast public sheet filtering
}